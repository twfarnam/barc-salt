" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" leader is just used elsewhere
let mapleader = "\<Space>"

" save
nnoremap <Leader>w :w<CR>

" space space to visual line mode
nmap <Leader><Leader> V

" set nowrap
set expandtab
set tabstop=2
set shiftwidth=2
set autowrite
set mouse=a
set title

" line numbers (plugin uses relative)
set number

" exit insert mode (ESC is far away)
:imap jj <Esc>

" replace one char with space
:nmap <Space> i_<Esc>r

" use system clipboard yank / put
set clipboard=unnamed
" OS X copy commands
"vmap <D-c> y:call system("pbcopy", getreg("\""))<CR>
"nmap <D-v> :call setreg("\"",system("pbpaste"))<CR>p

set backup
set backupdir=~/tmp
set dir=~/tmp

" moves cursor to previous line when hitting back/forward movement
set whichwrap+=<,>,h,l,[,]


" good use of windows:

" get to windows faster
"map <silent> <C-k> :wincmd k<CR>
"nmap <silent> <C-j> :wincmd j<CR>
"map <silent> <C-h> :wincmd h<CR>
"map <silent> <C-l> :wincmd l<CR>

" and buffers
nmap <silent> <C-j> :bn<CR>
nmap <silent> <C-k> :bp<CR>
" saves first if changed (the others do it automagically)
nmap <silent> <C-h> :update<CR>:bd<CR>


" allow the minimum window height to be zero so only file name is visible
set wmh=0

" quickly resize
nmap - <C-W>-
nmap + <C-W>+
nmap _ <C-W>_
nmap = <C-W>=

" Open new split panes to right and bottom, which feels more natural than Vimâ€™s default:
set splitbelow
set splitright

" end windows section


" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50        " keep 50 lines of command line history
set ruler        " show the cursor position all the time
set showcmd        " display incomplete commands
set incsearch        " do incremental searching

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  " set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent        " always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
          \ | wincmd p | diffthis
endif

" this should improve performance of syntax highlighting
set nocursorcolumn
set nocursorline
syntax sync minlines=256

" this sets .jst.ejs to same as .erb
au BufNewFile,BufRead *.ejs set filetype=html

" rails things
au BufNewFile,BufRead *.cap set filetype=ruby
au BufNewFile,BufRead *.rabl set filetype=ruby

